@using Services
@inject ICalendarEventsProvider CalendarEventsProvider

<div class="calendar">
    <div class="row">
        <div class="col-sm-12 col-lg-2">
            <select name="" id="" class="fluent-input" @onchange="OnYearSelectChanged">
                @for (int i = 2010; i < 2022; i++){
                    <option "@((i == 2020 ? "selected" : ""))">@i</option>
                }
            </select>
        </div>
        <div class="col-sm-12 col-lg-2">
            <select name="" id="" class="fluent-input" @onchange="OnMonthSelectChanged">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5" selected>May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>
        </div>
    </div>
    <table class="calendar-table">
        <thead>
            <tr>
                <td>Sun</td>
                <td>Mon</td>
                <td>Tue</td>
                <td>Wed</td>
                <td>Thu</td>
                <td>Fri</td>
                <td>Sat</td>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < COUNT_DAYS_IN_CALENDAR; i++)
            {
                <tr>
                    @foreach (var day in days.Skip(i * 7).Take(7))
                    {
                        @DayTemplate(day)
                    }
                </tr>    
            }
        </tbody>
    </table>
</div>


@code {
    private int COUNT_DAYS_IN_CALENDAR = 42;
    [Parameter]
    public RenderFragment<CalendarDay> DayTemplate {get; set;}
    private int year = 2020;
    private int month = 5;
    private List<CalendarDay> days = new List<CalendarDay>();
    private IEnumerable<CalendarEvent> events {get; set;}

    async Task OnYearSelectChanged(ChangeEventArgs e){
        year = Convert.ToInt32(e.Value.ToString());
        await UpdateCalendar();
    }

    async Task OnMonthSelectChanged(ChangeEventArgs e){
        month = Convert.ToInt32(e.Value.ToString());
        await UpdateCalendar();
    }

    protected override async Task OnInitializedAsync(){
       await UpdateCalendar(); 

       AddEvent.OnEventAdded += () => {
           StateHasChanged();
       };
    }

    private async Task UpdateCalendar(){
        var events = await CalendarEventsProvider.GetEventsInMonthAsync(year, month);

        days = new List<CalendarDay>();
        var firstDayDate = new DateTime(year, month, 1);
        var weekDayNumber = (int)firstDayDate.DayOfWeek;
        var numberOfEmptyDays = weekDayNumber;

        var lastDayInPrevMonth = DateTime.DaysInMonth(month > 0 ? year : year-1, month > 1 ? month -1 : 12);
        //add empty days
        for (int i = numberOfEmptyDays; i > 0; i--)
        {     
            days.Add(new CalendarDay {
                DayNumber = lastDayInPrevMonth -i +1,
                IsEmpty = true
            });
        }

        int numberIsDaysInMonth = DateTime.DaysInMonth(year, month);
        for (int i = 0; i < numberIsDaysInMonth; i++)
        {
            days.Add(new CalendarDay {
                DayNumber = i + 1,
                IsEmpty = false,
                Date = new DateTime(year, month, i + 1)
            });
            await AddEventsToCalendar(days.Last(), events); //too lazy to add to a local var
        }

        int remainingDays = COUNT_DAYS_IN_CALENDAR - days.Count;
        for (int i = 0; i < remainingDays; i++)
        {
            days.Add(new CalendarDay {
                DayNumber = i + 1,
                IsEmpty = true
            });            
        }
    }

    private async Task AddEventsToCalendar(CalendarDay calendarDay, IEnumerable<CalendarEvent> events){
        if (events != null && events.Count() > 0){
            await Task.Run(() => {
                var filteredEvents = events.Where(e => e.StartDate.Date == calendarDay.Date.Date);
                foreach (CalendarEvent filteredEvent in filteredEvents)
                {
                    calendarDay.Events.Add(filteredEvent);
                };
            });
        }
    }
}